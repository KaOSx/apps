Index: include/VBox/sup.h
===================================================================
--- include/VBox/sup.h	(revision 150636)
+++ include/VBox/sup.h	(working copy)
@@ -2142,6 +2142,26 @@
  */
 SUPR0DECL(uint32_t) SUPR0GetKernelFeatures(void);
 
+/**
+ * Notification from R0 VMM prior to loading the guest-FPU register state.
+ *
+ * @returns Whether the host-FPU register state has been saved by the host kernel.
+ * @param   fCtxHook    Whether thread-context hooks are enabled.
+ *
+ * @remarks Called with preemption disabled.
+ */
+SUPR0DECL(bool) SUPR0FpuBegin(bool fCtxHook);
+
+/**
+ * Notification from R0 VMM after saving the guest-FPU register state (and
+ * potentially restoring the host-FPU register state) in ring-0.
+ *
+ * @param   fCtxHook    Whether thread-context hooks are enabled.
+ *
+ * @remarks Called with preemption disabled.
+ */
+SUPR0DECL(void) SUPR0FpuEnd(bool fCtxHook);
+
 /** @copydoc RTLogGetDefaultInstanceEx
  * @remarks To allow overriding RTLogGetDefaultInstanceEx locally. */
 SUPR0DECL(struct RTLOGGER *) SUPR0GetDefaultLogInstanceEx(uint32_t fFlagsAndGroup);
Index: src/VBox/Additions/linux/drm/vbox_fb.c
===================================================================
--- src/VBox/Additions/linux/drm/vbox_fb.c	(revision 150636)
+++ src/VBox/Additions/linux/drm/vbox_fb.c	(working copy)
@@ -362,6 +362,9 @@
 	info->screen_size = size;
 
 #ifdef CONFIG_FB_DEFERRED_IO
+# if RTLNX_VER_MIN(5,19,0)
+	info->fix.smem_len = info->screen_size;
+# endif
 	info->fbdefio = &vbox_defio;
 	fb_deferred_io_init(info);
 #endif
Index: src/VBox/Additions/linux/drm/vbox_ttm.c
===================================================================
--- src/VBox/Additions/linux/drm/vbox_ttm.c	(revision 150636)
+++ src/VBox/Additions/linux/drm/vbox_ttm.c	(working copy)
@@ -320,8 +320,10 @@
 	if (ttm_tt_init(tt, bdev, size, page_flags, dummy_read_page)) {
 #elif RTLNX_VER_MAX(5,11,0) && !RTLNX_RHEL_RANGE(8,5, 8,99)
 	if (ttm_tt_init(tt, bo, page_flags)) {
+#elif RTLNX_VER_MAX(5,19,0)
+	if (ttm_tt_init(tt, bo, page_flags, ttm_write_combined)) {
 #else
-	if (ttm_tt_init(tt, bo, page_flags, ttm_write_combined)) {
+	if (ttm_tt_init(tt, bo, page_flags, ttm_write_combined, 0)) {
 #endif
 		kfree(tt);
 		return NULL;
Index: src/VBox/Additions/linux/sharedfolders/regops.c
===================================================================
--- src/VBox/Additions/linux/sharedfolders/regops.c	(revision 150636)
+++ src/VBox/Additions/linux/sharedfolders/regops.c	(working copy)
@@ -3581,8 +3581,14 @@
  * Needed for mmap and reads+writes when the file is mmapped in a
  * shared+writeable fashion.
  */
+#if RTLNX_VER_MIN(5,19,0)
+static int vbsf_read_folio(struct file *file, struct folio *folio)
+{
+    struct page *page = &folio->page;
+#else
 static int vbsf_readpage(struct file *file, struct page *page)
 {
+#endif
     struct inode *inode = VBSF_GET_F_DENTRY(file)->d_inode;
     int           err;
 
@@ -3728,8 +3734,7 @@
 /**
  * Called when writing thru the page cache (which we shouldn't be doing).
  */
-int vbsf_write_begin(struct file *file, struct address_space *mapping, loff_t pos,
-                     unsigned len, unsigned flags, struct page **pagep, void **fsdata)
+static inline void vbsf_write_begin_warn(loff_t pos, unsigned len, unsigned flags)
 {
     /** @todo r=bird: We shouldn't ever get here, should we?  Because we don't use
      *        the page cache for any writes AFAIK.  We could just as well use
@@ -3745,8 +3750,24 @@
         WARN_ON(1);
 # endif
     }
+}
+
+# if RTLNX_VER_MIN(5,19,0)
+int vbsf_write_begin(struct file *file, struct address_space *mapping, loff_t pos,
+                     unsigned len, struct page **pagep, void **fsdata)
+{
+    vbsf_write_begin_warn(pos, len, 0);
+    return simple_write_begin(file, mapping, pos, len, pagep, fsdata);
+}
+# else
+int vbsf_write_begin(struct file *file, struct address_space *mapping, loff_t pos,
+                     unsigned len, unsigned flags, struct page **pagep, void **fsdata)
+{
+    vbsf_write_begin_warn(pos, len, flags);
     return simple_write_begin(file, mapping, pos, len, flags, pagep, fsdata);
 }
+# endif
+
 #endif /* KERNEL_VERSION >= 2.6.24 */
 
 #if RTLNX_VER_MIN(5,14,0)
@@ -3820,10 +3841,16 @@
  * @todo the FsPerf touch/flush (mmap) test fails on 4.4.0 (ubuntu 16.04 lts).
  */
 struct address_space_operations vbsf_reg_aops = {
+#if RTLNX_VER_MIN(5,19,0)
+    .read_folio     = vbsf_read_folio,
+#else
     .readpage       = vbsf_readpage,
+#endif
     .writepage      = vbsf_writepage,
     /** @todo Need .writepages if we want msync performance...  */
-#if RTLNX_VER_MIN(2,5,12)
+#if RTLNX_VER_MIN(5,18,0)
+    .dirty_folio = filemap_dirty_folio,
+#elif RTLNX_VER_MIN(2,5,12)
     .set_page_dirty = __set_page_dirty_buffers,
 #endif
 #if RTLNX_VER_MIN(5,14,0)
@@ -3840,4 +3867,3 @@
     .direct_IO      = vbsf_direct_IO,
 #endif
 };
-
Index: src/VBox/Additions
===================================================================
--- src/VBox/Additions	(revision 150636)
+++ src/VBox/Additions	(working copy)

Property changes on: src/VBox/Additions
___________________________________________________________________
Modified: svn:mergeinfo
## -0,0 +0,2 ##
   Merged /trunk/src/VBox/Additions:r150844,151718-151720
   Merged /branches/VBox-6.1/src/VBox/Additions:r151572,151833-151835
Index: src/VBox/HostDrivers/Support/SUPDrv.cpp
===================================================================
--- src/VBox/HostDrivers/Support/SUPDrv.cpp	(revision 150636)
+++ src/VBox/HostDrivers/Support/SUPDrv.cpp	(working copy)
@@ -98,6 +98,18 @@
 # endif
 #endif
 
+#if defined(RT_OS_LINUX) && !defined(__NO_FORTIFY) && defined(__OPTIMIZE__) && defined(CONFIG_FORTIFY_SOURCE)
+/* In Linux 5.18-rc1, memcpy became a wrapper which does fortify checks
+ * before triggering __underlying_memcpy() call. We do not pass these checks here,
+ * so bypass them for now.  */
+# if RTLNX_VER_MIN(5,18,0)
+#  define SUPDRV_MEMCPY __underlying_memcpy
+# else
+# define SUPDRV_MEMCPY  memcpy
+# endif
+#else
+# define SUPDRV_MEMCPY  memcpy
+#endif
 
 /*
  * Logging assignments:
@@ -266,6 +278,8 @@
     SUPEXP_STK_BACK(    2,  SUPR0ContFree),
     SUPEXP_STK_BACK(    2,  SUPR0ChangeCR4),
     SUPEXP_STK_BACK(    1,  SUPR0EnableVTx),
+    SUPEXP_STK_OKAY(    1,  SUPR0FpuBegin),
+    SUPEXP_STK_OKAY(    1,  SUPR0FpuEnd),
     SUPEXP_STK_BACK(    0,  SUPR0SuspendVTxOnCpu),
     SUPEXP_STK_BACK(    1,  SUPR0ResumeVTxOnCpu),
     SUPEXP_STK_OKAY(    1,  SUPR0GetCurrentGdtRw),
@@ -1742,7 +1756,7 @@
 
             /* execute */
             pReq->u.Out.cFunctions = RT_ELEMENTS(g_aFunctions);
-            memcpy(&pReq->u.Out.aFunctions[0], g_aFunctions, sizeof(g_aFunctions));
+            SUPDRV_MEMCPY(&pReq->u.Out.aFunctions[0], g_aFunctions, sizeof(g_aFunctions));
             pReq->Hdr.rc = VINF_SUCCESS;
             return 0;
         }
Index: src/VBox/HostDrivers/Support/darwin/SUPDrv-darwin.cpp
===================================================================
--- src/VBox/HostDrivers/Support/darwin/SUPDrv-darwin.cpp	(revision 150636)
+++ src/VBox/HostDrivers/Support/darwin/SUPDrv-darwin.cpp	(working copy)
@@ -2002,6 +2002,18 @@
 }
 
 
+SUPR0DECL(bool) SUPR0FpuBegin(bool fCtxHook)
+{
+    RT_NOREF(fCtxHook);
+    return false;
+}
+
+
+SUPR0DECL(void) SUPR0FpuEnd(bool fCtxHook)
+{
+    RT_NOREF(fCtxHook);
+}
+
 /*
  *
  * org_virtualbox_SupDrv
Index: src/VBox/HostDrivers/Support/freebsd/SUPDrv-freebsd.c
===================================================================
--- src/VBox/HostDrivers/Support/freebsd/SUPDrv-freebsd.c	(revision 150636)
+++ src/VBox/HostDrivers/Support/freebsd/SUPDrv-freebsd.c	(working copy)
@@ -640,3 +640,16 @@
     return 0;
 }
 
+
+SUPR0DECL(bool) SUPR0FpuBegin(bool fCtxHook)
+{
+    RT_NOREF(fCtxHook);
+    return false;
+}
+
+
+SUPR0DECL(void) SUPR0FpuEnd(bool fCtxHook)
+{
+    RT_NOREF(fCtxHook);
+}
+
Index: src/VBox/HostDrivers/Support/linux/SUPDrv-linux.c
===================================================================
--- src/VBox/HostDrivers/Support/linux/SUPDrv-linux.c	(revision 150636)
+++ src/VBox/HostDrivers/Support/linux/SUPDrv-linux.c	(working copy)
@@ -40,6 +40,7 @@
 #include <iprt/semaphore.h>
 #include <iprt/initterm.h>
 #include <iprt/process.h>
+#include <iprt/thread.h>
 #include <VBox/err.h>
 #include <iprt/mem.h>
 #include <VBox/log.h>
@@ -1454,6 +1455,61 @@
 }
 
 
+SUPR0DECL(bool) SUPR0FpuBegin(bool fCtxHook)
+{
+    RT_NOREF(fCtxHook);
+#if RTLNX_VER_MIN(4,19,0) /* Going back to 4.19.0 for better coverage, we
+                             probably only need 5.17.7+ in the end. */
+    /*
+     * HACK ALERT!
+     *
+     * We'd like to use the old __kernel_fpu_begin() API which was removed in
+     * early 2019, because we typically run with preemption enabled and have an
+     * preemption hook installed which will call kernel_fpu_end() in case we're
+     * scheduled out after getting in here.  The preemption hook is almost
+     * useless if we run with preemption disabled.
+     *
+     * For the case where the kernel does not have preemption hooks, we get here
+     * with preemption already disabled and one more count doesn't make any
+     * difference.
+     *
+     * So, after the kernel_fpu_begin() call we undo the implicit preempt_disable()
+     * call it does, so the preemption hook can do its work and the VBox user has
+     * a more responsive system.
+     *
+     * See @bugref{10209#c12} and onwards for more details.
+     */
+    Assert(fCtxHook || !RTThreadPreemptIsEnabled(NIL_RTTHREAD));
+    kernel_fpu_begin();
+# if 0 /* Always do it for now for better test coverage. */
+    if (fCtxHook)
+# endif
+        preempt_enable();
+    return false; /** @todo Not sure if we have license to use any extended state, or
+                   *        if we're limited to the SSE & x87 FPU. If it's the former,
+                   *        we should return @a true and the caller can skip
+                   *        saving+restoring the host state and save some time. */
+#else
+    return false;
+#endif
+}
+
+
+SUPR0DECL(void) SUPR0FpuEnd(bool fCtxHook)
+{
+    RT_NOREF(fCtxHook);
+#if RTLNX_VER_MIN(4,19,0)
+    /* HACK ALERT! See SUPR0FpuBegin for an explanation of this. */
+    Assert(!RTThreadPreemptIsEnabled(NIL_RTTHREAD));
+# if 0 /* Always do it for now for better test coverage. */
+    if (fCtxHook)
+# endif
+        preempt_disable();
+    kernel_fpu_end();
+#endif
+}
+
+
 int VBOXCALL    supdrvOSGetCurrentGdtRw(RTHCUINTPTR *pGdtRw)
 {
 #if RTLNX_VER_MIN(4,12,0)
Index: src/VBox/HostDrivers/Support/os2/SUPDrv-os2.cpp
===================================================================
--- src/VBox/HostDrivers/Support/os2/SUPDrv-os2.cpp	(revision 150636)
+++ src/VBox/HostDrivers/Support/os2/SUPDrv-os2.cpp	(working copy)
@@ -541,3 +541,16 @@
     return 0;
 }
 
+
+SUPR0DECL(bool) SUPR0FpuBegin(bool fCtxHook)
+{
+    RT_NOREF(fCtxHook);
+    return false;
+}
+
+
+SUPR0DECL(void) SUPR0FpuEnd(bool fCtxHook)
+{
+    RT_NOREF(fCtxHook);
+}
+
Index: src/VBox/HostDrivers/Support/solaris/SUPDrv-solaris.c
===================================================================
--- src/VBox/HostDrivers/Support/solaris/SUPDrv-solaris.c	(revision 150636)
+++ src/VBox/HostDrivers/Support/solaris/SUPDrv-solaris.c	(working copy)
@@ -1309,3 +1309,16 @@
     return 0;
 }
 
+
+SUPR0DECL(bool) SUPR0FpuBegin(bool fCtxHook)
+{
+    RT_NOREF(fCtxHook);
+    return false;
+}
+
+
+SUPR0DECL(void) SUPR0FpuEnd(bool fCtxHook)
+{
+    RT_NOREF(fCtxHook);
+}
+
Index: src/VBox/HostDrivers/Support/win/SUPDrv-win.cpp
===================================================================
--- src/VBox/HostDrivers/Support/win/SUPDrv-win.cpp	(revision 150636)
+++ src/VBox/HostDrivers/Support/win/SUPDrv-win.cpp	(working copy)
@@ -2704,6 +2704,19 @@
 }
 
 
+SUPR0DECL(bool) SUPR0FpuBegin(bool fCtxHook)
+{
+    RT_NOREF(fCtxHook);
+    return false;
+}
+
+
+SUPR0DECL(void) SUPR0FpuEnd(bool fCtxHook)
+{
+    RT_NOREF(fCtxHook);
+}
+
+
 SUPR0DECL(int) SUPR0IoCtlSetupForHandle(PSUPDRVSESSION pSession, intptr_t hHandle, uint32_t fFlags, PSUPR0IOCTLCTX *ppCtx)
 {
     /*
Index: src/VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c
===================================================================
--- src/VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c	(revision 150636)
+++ src/VBox/HostDrivers/VBoxNetFlt/linux/VBoxNetFlt-linux.c	(working copy)
@@ -2311,7 +2311,13 @@
                 vboxNetFltDumpPacket(pSG, true, "host", (fDst & INTNETTRUNKDIR_WIRE) ? 0 : 1);
                 Log6(("vboxNetFltPortOsXmit: pBuf->cb dump:\n%.*Rhxd\n", sizeof(pBuf->cb), pBuf->cb));
                 Log6(("vboxNetFltPortOsXmit: netif_rx_ni(%p)\n", pBuf));
+#if RTLNX_VER_MIN(5,18,0)
+                local_bh_disable();
+                err = netif_rx(pBuf);
+                local_bh_enable();
+#else
                 err = netif_rx_ni(pBuf);
+#endif
                 if (err)
                     rc = RTErrConvertFromErrno(err);
             }
Index: src/VBox/Runtime/r0drv/linux/the-linux-kernel.h
===================================================================
--- src/VBox/Runtime/r0drv/linux/the-linux-kernel.h	(revision 150636)
+++ src/VBox/Runtime/r0drv/linux/the-linux-kernel.h	(working copy)
@@ -184,6 +184,11 @@
 # include <asm/tlbflush.h>
 #endif
 
+/* for kernel_fpu_begin / kernel_fpu_end() */
+#if RTLNX_VER_MIN(4,2,0)
+# include <asm/fpu/api.h>
+#endif
+
 #if RTLNX_VER_MIN(3,7,0)
 # include <asm/smap.h>
 #else
Index: src/VBox/VMM/VMMR0/CPUMR0.cpp
===================================================================
--- src/VBox/VMM/VMMR0/CPUMR0.cpp	(revision 150636)
+++ src/VBox/VMM/VMMR0/CPUMR0.cpp	(working copy)
@@ -440,6 +440,11 @@
     Assert(!(pVCpu->cpum.s.fUseFlags & CPUM_USED_FPU_GUEST));
     Assert(!(pVCpu->cpum.s.fUseFlags & CPUM_SYNC_FPU_STATE));
 
+    /* Notify the support driver prior to loading the guest-FPU register state. */
+    SUPR0FpuBegin(VMMR0ThreadCtxHookIsEnabled(pVCpu));
+    /** @todo use return value? Currently skipping that to be on the safe side
+     *        wrt. extended state (linux). */
+
     if (!pVM->cpum.s.HostFeatures.fLeakyFxSR)
     {
         Assert(!(pVCpu->cpum.s.fUseFlags & CPUM_USED_MANUAL_XMM_RESTORE));
@@ -504,6 +509,9 @@
                 cpumR0SaveGuestRestoreHostFPUState(&pVCpu->cpum.s);
             pVCpu->cpum.s.fUseFlags &= ~CPUM_USED_MANUAL_XMM_RESTORE;
         }
+
+        /* Notify the support driver after loading the host-FPU register state. */
+        SUPR0FpuEnd(VMMR0ThreadCtxHookIsEnabled(pVCpu));
     }
     else
         fSavedGuest = false;
