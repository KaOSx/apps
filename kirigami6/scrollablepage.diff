diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 76d349d7a5e6ed7f6527c052a1cd7d10af844c6a..bbee9f7d2101f50001261e8b6a4a69213ec91fde 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -219,7 +219,6 @@ ecm_target_qml_sources(KirigamiPlugin PRIVATE PATH private SOURCES
     controls/private/GlobalDrawerActionItem.qml
     controls/private/PageActionPropertyGroup.qml
     controls/private/PrivateActionToolButton.qml
-    controls/private/RefreshableScrollView.qml
     controls/private/SwipeItemEventFilter.qml
 )
 
@@ -268,7 +267,6 @@ ecm_target_qml_sources(KirigamiPlugin PRIVATE PATH templates/private SOURCES
     controls/templates/private/IconPropertiesGroup.qml
     controls/templates/private/MenuIcon.qml
     controls/templates/private/PassiveNotification.qml
-    controls/templates/private/ScrollView.qml
 )
 
 ecm_target_qml_sources(KirigamiPlugin PRIVATE PATH styles/Material SOURCES
diff --git a/src/controls/ScrollablePage.qml b/src/controls/ScrollablePage.qml
index 430d5f74829f1ad64ab89b4d38d6c57044b2fc99..1ba3d56b5eea79f3869c12a30bc8a26e18907241 100644
--- a/src/controls/ScrollablePage.qml
+++ b/src/controls/ScrollablePage.qml
@@ -6,7 +6,9 @@
 
 import QtQuick 2.15
 import QtQuick.Templates 2.15 as T
+import QtQuick.Controls 2.15 as QQC2
 import QtQuick.Layouts 1.15
+import QtGraphicalEffects 1.0
 
 import org.kde.kirigami 2.19
 import org.kde.kirigami.templates 2.2 as KT
@@ -70,40 +72,44 @@ Page {
      * This signals the application logic to start its refresh procedure.
      * The application itself will have to set back this property to false when done.
      */
-    property alias refreshing: scrollView.refreshing
+    property bool refreshing: false
 
     /**
      * \property bool ScrollablePage::supportsRefreshing
      * If true the list supports the "pull down to refresh" behavior.
      * By default it is false.
      */
-    property alias supportsRefreshing: scrollView.supportsRefreshing
+    property bool supportsRefreshing: false
 
     /**
      * \property QtQuick.Flickable ScrollablePage::flickable
      * The main Flickable item of this page.
      */
-    property alias flickable: scrollView.flickableItem
+    readonly property Flickable flickable: itemsParent.flickable
 
     /**
      * \property Qt.ScrollBarPolicy ScrollablePage::verticalScrollBarPolicy
      * The vertical scrollbar policy.
      */
-    property alias verticalScrollBarPolicy: scrollView.verticalScrollBarPolicy
+    property int verticalScrollBarPolicy
 
     /**
      * \property Qt.ScrollBarPolicy ScrollablePage::horizontalScrollBarPolicy
      * The horizontal scrollbar policy.
      */
-    property alias horizontalScrollBarPolicy: scrollView.horizontalScrollBarPolicy
+    property int horizontalScrollBarPolicy: QQC2.ScrollBar.AlwaysOff
+
+    default property alias scrollablePageData: itemsParent.data
+    property alias scrollablePageChildren: itemsParent.children
 
     /**
-     * The main content Item of this page.
-     * In the case of a ListView or GridView, both contentItem and flickable
-     * will be a pointer to the ListView (or GridView).
-     * @note This can't be contentItem as Page's contentItem is final.
+     * @deprecated here for compatibility, will be removed in next Frameworks release
      */
-    default property QtObject mainItem
+    property QtObject mainItem
+    onMainItemChanged: {
+        print("Warning: the mainItem property is deprecated");
+        scrollablePageData.push(mainItem);
+    }
 
     /**
      * If true, and if flickable is an item view, like a ListView or
@@ -114,24 +120,48 @@ Page {
      */
     property bool keyboardNavigationEnabled: true
 
-    contentHeight: root.flickable.contentHeight
-    implicitHeight: ((header && header.visible) ? header.implicitHeight : 0) + ((footer && footer.visible) ? footer.implicitHeight : 0) + contentHeight + topPadding + bottomPadding
-    implicitWidth: root.flickable.contentItem ? root.flickable.contentItem.implicitWidth : contentItem.implicitWidth + leftPadding + rightPadding
+    contentHeight: flickable ? flickable.contentHeight : 0
+    implicitHeight: {
+        let height = contentHeight + topPadding + bottomPadding;
+        if (header && header.visible) {
+            height += header.implicitHeight;
+        }
+        if (footer && footer.visible) {
+            height += footer.implicitHeight;
+        }
+        return height;
+    }
+
+    implicitWidth: {
+        let width = 0;
+        if (flickable) {
+            if (flickable.contentItem) {
+                return flickable.contentItem.implicitWidth;
+            } else {
+                return contentItem.implicitWidth + leftPadding + rightPadding;
+            }
+        } else {
+            return 0;
+        }
+    }
 
     Theme.inherit: false
     Theme.colorSet: flickable && flickable.hasOwnProperty("model") ? Theme.View : Theme.Window
 
-    clip: true
-    contentItem: RefreshableScrollView {
+    Keys.forwardTo: {
+        if (root.keyboardNavigationEnabled && root.flickable) {
+            if (("currentItem" in root.flickable) && root.flickable.currentItem) {
+                return [ root.flickable.currentItem, root.flickable ];
+            } else {
+                return [ root.flickable ];
+            }
+        } else {
+            return [];
+        }
+    }
+
+    contentItem: QQC2.ScrollView {
         id: scrollView
-        //NOTE: here to not expose it to public api
-        property QtObject oldMainItem
-        page: root
-        clip: true
-        topPadding: contentItem === flickableItem ? 0 : root.topPadding
-        leftPadding: root.leftPadding
-        rightPadding: root.rightPadding
-        bottomPadding: contentItem === flickableItem ? 0 : root.bottomPadding
         anchors {
             top: (root.header && root.header.visible)
                     ? root.header.bottom
@@ -142,38 +172,168 @@ Page {
             bottom: (root.footer && root.footer.visible) ? root.footer.top : parent.bottom
             left: parent.left
             right: parent.right
+            topMargin: root.refreshing ? busyIndicatorLoader.height : 0
+            Behavior on topMargin {
+                NumberAnimation {
+                    easing.type: Easing.InOutQuad
+                    duration: Units.longDuration
+                }
+            }
         }
+        QQC2.ScrollBar.horizontal.policy: root.horizontalScrollBarPolicy
+        QQC2.ScrollBar.vertical.policy: root.verticalScrollBarPolicy
     }
 
-    anchors.topMargin: 0
+    data: [
+        // Has to be a MouseArea that accepts events otherwise touch events on Wayland will get lost
+        MouseArea {
+            id: scrollingArea
+            width: itemsParent.flickable.width
+            height: Math.max(root.flickable.height, implicitHeight)
+            implicitHeight: {
+                let impl = 0;
+                for (let i in itemsParent.visibleChildren) {
+                    let child = itemsParent.visibleChildren[i];
+                    impl = Math.max(impl, child.implicitHeight);
+                }
+                return impl + itemsParent.anchors.topMargin + itemsParent.anchors.bottomMargin;
+            }
+            Item {
+                id: itemsParent
+                property Flickable flickable
+                anchors {
+                    fill: parent
+                    leftMargin: root.leftPadding
+                    topMargin: root.topPadding
+                    rightMargin: root.rightPadding
+                    bottomMargin: root.bottomPadding
+                }
+                onChildrenChanged: {
+                    let child = children[children.length - 1];
+                    if (child instanceof QQC2.ScrollView) {
+                        print("Warning: it's not supported to have ScrollViews inside a ScrollablePage")
+                    }
+                }
+            }
+            Binding {
+                target: root.flickable
+                property: "bottomMargin"
+                value: root.bottomPadding
+            }
+        },
 
-    Keys.forwardTo: root.keyboardNavigationEnabled && root.flickable
-                        ? (("currentItem" in root.flickable) && root.flickable.currentItem ?
-                           [ root.flickable.currentItem, root.flickable ] : [ root.flickable ])
-                        : []
+        Loader {
+            id: busyIndicatorLoader
+            z: 99
+            y: root.flickable.verticalLayoutDirection === ListView.BottomToTop
+                ? -root.flickable.contentY + root.flickable.originY + height
+                : -root.flickable.contentY + root.flickable.originY - height + scrollView.y
+            width: root.flickable.width
+            height: Units.gridUnit * 4
+            active: root.supportsRefreshing
 
-    //HACK to get the mainItem as the last one, all the other eventual items as an overlay
-    //no idea if is the way the user expects
-    onMainItemChanged: {
-        if (mainItem instanceof Item) {
-            scrollView.contentItem = mainItem
-            mainItem.focus = true
-        } else if (mainItem instanceof T.Drawer) {
-            //don't try to reparent drawers
-            return;
-        } else if (mainItem instanceof KT.OverlaySheet) {
-            //reparent sheets
-            if (mainItem.parent === root || mainItem.parent === null) {
-                mainItem.parent = root;
+            sourceComponent: Item {
+                id: busyIndicatorFrame
+
+                QQC2.BusyIndicator {
+                    id: busyIndicator
+                    z: 1
+                    anchors.centerIn: parent
+                    running: root.refreshing
+                    visible: root.refreshing
+                    //Android busywidget QQC seems to be broken at custom sizes
+                }
+                Rectangle {
+                    id: spinnerProgress
+                    anchors {
+                        fill: busyIndicator
+                        margins: Math.ceil(Units.smallSpacing)
+                    }
+                    radius: width
+                    visible: supportsRefreshing && !refreshing && progress > 0
+                    color: "transparent"
+                    opacity: 0.8
+                    border.color: Theme.backgroundColor
+                    border.width: Math.ceil(Units.smallSpacing)
+                    property real progress: supportsRefreshing && !refreshing ? (busyIndicatorLoader.y/busyIndicatorFrame.height) : 0
+                }
+                ConicalGradient {
+                    source: spinnerProgress
+                    visible: spinnerProgress.visible
+                    anchors.fill: spinnerProgress
+                    gradient: Gradient {
+                        GradientStop { position: 0.00; color: Theme.highlightColor }
+                        GradientStop { position: spinnerProgress.progress; color: Theme.highlightColor }
+                        GradientStop { position: spinnerProgress.progress + 0.01; color: "transparent" }
+                        GradientStop { position: 1.00; color: "transparent" }
+                    }
+                }
+
+                Connections {
+                    target: busyIndicatorLoader
+                    function onYChanged() {
+                        if (!supportsRefreshing) {
+                            return;
+                        }
+
+                        if (!root.refreshing && busyIndicatorLoader.y > busyIndicatorFrame.height/2 + topPadding) {
+                            refreshTriggerTimer.running = true;
+                        } else {
+                            refreshTriggerTimer.running = false;
+                        }
+                    }
+                }
+                Timer {
+                    id: refreshTriggerTimer
+                    interval: 500
+                    onTriggered: {
+                        if (!root.refreshing && busyIndicatorLoader.y > busyIndicatorFrame.height/2 + topPadding) {
+                            root.refreshing = true;
+                        }
+                    }
+                }
+            }
+        }
+    ]
+
+    Component.onCompleted: {
+        for (let i in itemsParent.data) {
+            let child = itemsParent.data[i];
+            if (child instanceof Flickable) {
+                // If there were more flickable children, take the last one, as behavior compatibility
+                // with old internal ScrollView
+                child.activeFocusOnTab = true;
+                itemsParent.flickable = child;
+                child.keyNavigationEnabled = true;
+                child.keyNavigationWraps = false;
+            } else if (child instanceof Item) {
+                child.anchors.left = itemsParent.left;
+                child.anchors.right = itemsParent.right;
+            } else if (child instanceof KT.OverlaySheet) {
+                // Reparent sheets, needs to be done before Component.onCompleted
+                if (child.parent === itemsParent || child.parent === null) {
+                    child.parent = root;
+                }
             }
-            root.data.push(mainItem);
-            return;
         }
 
-        if (scrollView.oldMainItem && scrollView.oldMainItem instanceof Item
-            && (typeof applicationWindow === 'undefined'|| scrollView.oldMainItem.parent !== applicationWindow().overlay)) {
-            scrollView.oldMainItem.parent = overlay
+        if (itemsParent.flickable) {
+            scrollView.contentItem = flickable;
+            flickable.parent = scrollView;
+            // The flickable needs focus only if the page didn't already explicitly set focus to some other control (eg a text field in the header)
+            Qt.callLater( () => {if (root.activeFocus) itemsParent.flickable.forceActiveFocus()});
+            // Some existing code incorrectly uses anchors
+            flickable.anchors.fill = undefined;
+            flickable.anchors.left = undefined;
+            flickable.anchors.right = undefined;
+            flickable.anchors.top = undefined;
+            flickable.anchors.bottom = undefined;
+        } else {
+            itemsParent.flickable = scrollView.contentItem;
+            scrollingArea.parent = itemsParent.flickable.contentItem;
+            itemsParent.flickable.contentHeight = Qt.binding(() => { return scrollingArea.implicitHeight - itemsParent.flickable.topMargin - itemsParent.flickable.bottomMargin });
+            itemsParent.flickable.contentWidth = Qt.binding(() => { return scrollingArea.implicitWidth });
         }
-        scrollView.oldMainItem = mainItem
+        itemsParent.flickable.flickableDirection = Flickable.VerticalFlick;
     }
 }
diff --git a/src/controls/private/RefreshableScrollView.qml b/src/controls/private/RefreshableScrollView.qml
deleted file mode 100644
index 39427d6936c25ec30397e01a43cb6bacefb6c540..0000000000000000000000000000000000000000
--- a/src/controls/private/RefreshableScrollView.qml
+++ /dev/null
@@ -1,207 +0,0 @@
-/*
- *  SPDX-FileCopyrightText: 2015 Marco Martin <mart@kde.org>
- *
- *  SPDX-License-Identifier: LGPL-2.0-or-later
- */
-
-import QtQuick 2.15
-import QtQuick.Window 2.15
-import QtQuick.Controls 2.0 as QQC2
-import QtGraphicalEffects 1.0
-import QtQuick.Layouts 1.2
-import QtQml 2.15
-import org.kde.kirigami 2.4
-import "../templates/private" as P
-
-P.ScrollView {
-    id: root
-
-    /**
-     * type: bool
-     * If true the list is asking for refresh and will show a loading spinner.
-     * it will automatically be set to true when the user pulls down enough the list.
-     * This signals the application logic to start its refresh procedure.
-     * The application itself will have to set back this property to false when done.
-     */
-    property bool refreshing: false
-
-    /**
-     * type: bool
-     * If true the list supports the "pull down to refresh" behavior.
-     */
-    property bool supportsRefreshing: false
-
-    /**
-     * Warning: These duplicate the padding properties from P.ScrollView. This
-     * is apparently allowed by QML but very unexpected.
-     *
-     * TODO KF6: Fix this.
-     */
-
-    /**
-     * leftPadding: int
-     * default contents padding at left
-     */
-    property int leftPadding: Units.gridUnit
-
-    /**
-     * topPadding: int
-     * default contents padding at top
-     */
-    property int topPadding: Units.gridUnit
-
-    /**
-     * rightPadding: int
-     * default contents padding at right
-     */
-    property int rightPadding: Units.gridUnit
-
-    /**
-     * bottomPadding: int
-     * default contents padding at bottom
-     */
-    property int bottomPadding: Units.gridUnit
-
-    /**
-     * Set when this scrollview manages a whole page
-     */
-    property Page page
-
-    property Item _swipeFilter
-
-    onRefreshingChanged: flickableItem.topMargin = topPadding + (refreshing ? busyIndicatorFrame.height : 0);
-    children: [
-        Item {
-            id: busyIndicatorFrame
-            z: 99
-            y: root.flickableItem.verticalLayoutDirection === ListView.BottomToTop
-                ? -root.flickableItem.contentY+root.flickableItem.originY+height
-                : -root.flickableItem.contentY+root.flickableItem.originY-height
-            width: root.flickableItem.width
-            height: busyIndicator.height + Units.gridUnit * 2
-            QQC2.BusyIndicator {
-                id: busyIndicator
-                anchors.centerIn: parent
-                running: root.refreshing
-                visible: root.refreshing
-                //Android busywidget QQC seems to be broken at custom sizes
-            }
-            Rectangle {
-                id: spinnerProgress
-                anchors {
-                    fill: busyIndicator
-                    margins: Math.ceil(Units.smallSpacing)
-                }
-                radius: width
-                visible: supportsRefreshing && !refreshing && progress > 0
-                color: "transparent"
-                opacity: 0.8
-                border.color: Theme.backgroundColor
-                border.width: Math.ceil(Units.smallSpacing)
-                property real progress: supportsRefreshing && !refreshing ? (parent.y/busyIndicatorFrame.height) : 0
-            }
-            ConicalGradient {
-                source: spinnerProgress
-                visible: spinnerProgress.visible
-                anchors.fill: spinnerProgress
-                gradient: Gradient {
-                    GradientStop { position: 0.00; color: Theme.highlightColor }
-                    GradientStop { position: spinnerProgress.progress; color: Theme.highlightColor }
-                    GradientStop { position: spinnerProgress.progress + 0.01; color: "transparent" }
-                    GradientStop { position: 1.00; color: "transparent" }
-                }
-            }
-
-            onYChanged: {
-                //it's overshooting enough and not reachable: start countdown for reachability
-
-                if (y > root.topPadding + Units.gridUnit && (typeof applicationWindow === "undefined" || !applicationWindow().reachableMode)) {
-                    overshootResetTimer.running = true;
-                //not reachable and not overshooting enough, stop reachability countdown
-                } else if (typeof applicationWindow === "undefined" || !applicationWindow().reachableMode) {
-                    //it's important it doesn't restart
-                    overshootResetTimer.running = false;
-                }
-
-                if (!supportsRefreshing) {
-                    return;
-                }
-
-                if (!root.refreshing && y > busyIndicatorFrame.height/2 + topPadding) {
-                    refreshTriggerTimer.running = true;
-                } else {
-                    refreshTriggerTimer.running = false;
-                }
-            }
-            Timer {
-                id: refreshTriggerTimer
-                interval: 500
-                onTriggered: {
-                    if (!root.refreshing && parent.y > busyIndicatorFrame.height/2 + topPadding) {
-                        root.refreshing = true;
-                    }
-                }
-            }
-            Connections {
-                enabled: typeof applicationWindow !== "undefined"
-                target: typeof applicationWindow !== "undefined" ? applicationWindow() : null
-                function onReachableModeChanged() {
-                    overshootResetTimer.running = applicationWindow().reachableMode;
-                }
-            }
-            Timer {
-                id: overshootResetTimer
-                interval: (typeof applicationWindow !== "undefined"  && applicationWindow().reachableMode) ? 8000 : 2000
-                onTriggered: {
-                    //put it there because widescreen may have changed since timer start
-                    if (!Settings.isMobile || (typeof applicationWindow !== "undefined"  && applicationWindow().wideScreen) || root.flickableItem.verticalLayoutDirection === ListView.BottomToTop) {
-                        return;
-                    }
-                    applicationWindow().reachableMode = !applicationWindow().reachableMode;
-                }
-            }
-
-            Binding {
-                target: root.flickableItem
-                property: "flickableDirection"
-                value: Flickable.VerticalFlick
-            }
-
-            Binding {
-                target: root.flickableItem
-                property: "bottomMargin"
-                value: root.page.bottomPadding
-            }
-
-            Binding {
-                target: root.contentItem
-                property: "width"
-                restoreMode: Binding.RestoreBinding
-                value: root.flickableItem.width
-                when: root.horizontalScrollBarPolicy === Qt.ScrollBarAlwaysOff
-            }
-        }
-    ]
-
-    Component.onCompleted: leftPaddingChanged()
-    onRightPaddingChanged: leftPaddingChanged()
-    onLeftPaddingChanged: {
-        //for gridviews do apply margins
-        if (root.contentItem === root.flickableItem) {
-            if (typeof root.flickableItem.cellWidth !== "undefined") {
-                flickableItem.anchors.leftMargin = leftPadding;
-                flickableItem.anchors.rightMargin = rightPadding;
-            } else {
-                flickableItem.anchors.leftMargin = 0;
-                flickableItem.anchors.rightMargin = 0;
-            }
-            flickableItem.anchors.topMargin = 0;
-            flickableItem.anchors.bottomMargin = 0;
-        } else {
-            flickableItem.anchors.leftMargin = leftPadding;
-            flickableItem.anchors.topMargin = topPadding;
-            flickableItem.anchors.rightMargin = rightPadding;
-            flickableItem.anchors.bottomMargin = 0;
-        }
-    }
-}
diff --git a/src/controls/templates/OverlayDrawer.qml b/src/controls/templates/OverlayDrawer.qml
index 5bbbbabbe4a3ca5a484484a17b02b245ee69bde1..6e8871d281f9f555f1e6dc1c99ade583bc9fa2c0 100644
--- a/src/controls/templates/OverlayDrawer.qml
+++ b/src/controls/templates/OverlayDrawer.qml
@@ -322,23 +322,6 @@ T2.Drawer {
     implicitWidth: contentWidth + leftPadding + rightPadding
     implicitHeight: contentHeight + topPadding + bottomPadding
 
-    //this is a workaround for the height not being propagated automatically only sometimes
-    // see https://bugs.kde.org/show_bug.cgi?id=398163
-    //NOTE: this is NOT a binding, otherwise it causes a binding loop in implicitHeight
-    Connections {
-        target: parent
-        function onWidthChanged() {
-            if (edge === Qt.TopEdge || edge === Qt.BottomEdge) {
-                width = parent.width;
-            }
-        }
-        function onHeightChanged() {
-            if (edge === Qt.LeftEdge || edge === Qt.RightEdge) {
-                height = parent.height;
-            }
-        }
-    }
-
     enter: Transition {
         SequentialAnimation {
             id: enterAnimation
diff --git a/src/controls/templates/OverlaySheet.qml b/src/controls/templates/OverlaySheet.qml
index 0a9d53be9db38f841ee97c9ee4956af876a8fae1..d5a7d397d499bf496bad9bf71ed7b93787c622e3 100644
--- a/src/controls/templates/OverlaySheet.qml
+++ b/src/controls/templates/OverlaySheet.qml
@@ -8,7 +8,7 @@
 import QtQuick 2.12
 import QtQuick.Layouts 1.2
 import QtQuick.Window 2.2
-import QtQuick.Controls 2.15
+import QtQuick.Controls 2.15 as QQC2
 import org.kde.kirigami 2.14
 import QtQuick.Templates 2.0 as T2
 import "private"
@@ -24,7 +24,7 @@ import "../private"
  * are taller than the screen space.
  *
  * @since 2.0
- * @inherit QtQml.QtObject
+ * @inherit QtQuick.QtObject
  */
 QtObject {
     id: root
@@ -112,8 +112,8 @@ QtObject {
         elide: Text.ElideRight
 
         // use tooltip for long text that is elided
-        ToolTip.visible: truncated && titleHoverHandler.hovered
-        ToolTip.text: root.title
+        QQC2.ToolTip.visible: truncated && titleHoverHandler.hovered
+        QQC2.ToolTip.text: root.title
         HoverHandler {
             id: titleHoverHandler
         }
@@ -183,11 +183,15 @@ QtObject {
         if (contentItem instanceof Flickable) {
             scrollView.flickableItem = contentItem;
             contentItem.parent = scrollView;
-            contentItem.anchors.fill = scrollView;
             scrollView.contentItem = contentItem;
+            scrollView.viewContent = contentItem.contentItem;
         } else {
             contentItem.parent = contentItemParent;
-            scrollView.contentItem = flickableContents;
+            flickableContents.parent = scrollView.flickableItem.contentItem;
+            flickableContents.anchors.top = scrollView.flickableItem.contentItem.top;
+            flickableContents.anchors.left = scrollView.flickableItem.contentItem.left;
+            flickableContents.anchors.right = scrollView.flickableItem.contentItem.right;
+            scrollView.viewContent = flickableContents;
             contentItem.anchors.left = contentItemParent.left;
             contentItem.anchors.right = contentItemParent.right;
         }
@@ -210,10 +214,14 @@ QtObject {
     }
 
     Component.onCompleted: {
-        if (!root.parent && typeof applicationWindow !== "undefined") {
-            root.parent = applicationWindow().overlay
-        }
-        headerItem.initHeader();
+        // ScrollablePage must do things related to parenting of OverlaySheets in its conCompleted, so this must execute later
+        // TODO KF6: port the root object to Popup template?
+        Qt.callLater(() => {
+            if (!root.parent && typeof applicationWindow !== "undefined") {
+                root.parent = applicationWindow().overlay
+            }
+            headerItem.initHeader();
+        });
     }
 
     readonly property Item rootItem: FocusScope {
@@ -392,7 +400,9 @@ QtObject {
 
                 width: mainItem.contentItemPreferredWidth <= 0 ? mainItem.width : (mainItem.contentItemMaximumWidth > 0 ? Math.min( mainItem.contentItemMaximumWidth, Math.max( mainItem.width/2, mainItem.contentItemPreferredWidth ) ) : Math.max( mainItem.width / 2, mainItem.contentItemPreferredWidth ) ) + leftPadding + rightPadding
 
-                implicitHeight: scrollView.contentItem === flickableContents ? root.contentItem.height + topPadding + bottomPadding : 0
+
+                implicitHeight: scrollView.viewContent === flickableContents ? root.contentItem.height + topPadding + bottomPadding : 0
+
                 Connections {
                     target: enabled ? flickableContents.Window.activeFocusItem : null
                     enabled: flickableContents.focus && flickableContents.Window.activeFocusItem && flickableContents.Window.activeFocusItem.hasOwnProperty("text")
@@ -676,15 +686,17 @@ QtObject {
                         }
                     }
 
-                    ScrollView {
+                    QQC2.ScrollView {
                         id: scrollView
 
                         //Don't do the automatic interactive enable/disable
-                        canFlickWithMouse: true
-                        property real animatedContentHeight: contentItem ? flickableItem.contentHeight : 0
+                        //canFlickWithMouse: true
+                        property Item viewContent
+                        property real animatedContentHeight: flickableItem.contentHeight
                         property bool userInteracting: false
                         Layout.fillWidth: true
                         Layout.fillHeight: true
+                        property alias flickableItem: scrollView.contentItem
 
                         focus: false
 
diff --git a/src/controls/templates/private/ScrollView.qml b/src/controls/templates/private/ScrollView.qml
deleted file mode 100644
index e674fea0fd4ea11da78e2442f471a2c1593f3283..0000000000000000000000000000000000000000
--- a/src/controls/templates/private/ScrollView.qml
+++ /dev/null
@@ -1,161 +0,0 @@
-/*
- *  SPDX-FileCopyrightText: 2016 Marco Martin <mart@kde.org>
- *
- *  SPDX-License-Identifier: LGPL-2.0-or-later
- */
-import QtQuick 2.7
-import QtQuick.Controls 2.0
-import QtQml 2.15
-import org.kde.kirigami 2.9 as Kirigami
-
-MouseArea {
-    id: root
-    default property Item contentItem
-    property Flickable flickableItem
-    clip: true
-
-    property int horizontalScrollBarPolicy: Qt.ScrollBarAlwaysOff
-    property int verticalScrollBarPolicy: Qt.ScrollBarAsNeeded
-    property int topPadding: 0
-    property int leftPadding: 0
-    property int bottomPadding: 0
-    property int rightPadding: 0
-    property bool canFlickWithMouse: false
-
-    // Note: These are used because RefreshableScrollView overrides right and
-    // bottom padding properties.
-    property int rightSpacing: !Kirigami.Settings.hasTransientTouchInput && flickableItem.ScrollBar.vertical && flickableItem.ScrollBar.vertical.visible ? flickableItem.ScrollBar.vertical.width : 0
-    property int bottomSpacing: !Kirigami.Settings.hasTransientTouchInput && flickableItem.ScrollBar.horizontal && flickableItem.ScrollBar.horizontal.visible ? flickableItem.ScrollBar.horizontal.height : 0
-
-    Accessible.onScrollDownAction: flickableItem.Accessible.onScrollDownAction
-    Accessible.onScrollUpAction: flickableItem.Accessible.onScrollUpAction
-
-    Keys.onUpPressed: scroll(Kirigami.Units.gridUnit * 2)
-    Keys.onDownPressed: scroll(-Kirigami.Units.gridUnit * 2)
-
-    function scroll(y) {
-        // Don't scroll if the view isn't scrollable!
-        if (flickableItem.contentHeight < flickableItem.height + flickableItem.contentY) {
-            return;
-        }
-        const minYExtent = flickableItem.topMargin - flickableItem.originY;
-        const maxYExtent = flickableItem.height - (flickableItem.contentHeight + flickableItem.bottomMargin + flickableItem.originY);
-
-        flickableItem.contentY = Math.min(-maxYExtent, Math.max(-minYExtent, flickableItem.contentY - y));
-    }
-
-    focus: true
-
-    onPressed: mouse.accepted = mouse.source !== Qt.MouseEventNotSynthesized
-    onVerticalScrollBarPolicyChanged: {
-        scrollBarCreationTimer.restart();
-    }
-    onHorizontalScrollBarPolicyChanged: {
-        scrollBarCreationTimer.restart();
-    }
-
-
-    onContentItemChanged: {
-        if (contentItem.hasOwnProperty("contentY")) {
-            flickableItem = contentItem;
-            if (typeof flickableItem.keyNavigationEnabled !== "undefined") {
-                flickableItem.keyNavigationEnabled = true;
-                flickableItem.keyNavigationWraps = false;
-            }
-            contentItem.parent = flickableParent;
-        } else {
-            flickableItem = flickableComponent.createObject(flickableParent);
-            contentItem.parent = flickableItem.contentItem;
-        }
-
-        flickableItem.anchors.fill = flickableParent;
-
-        scrollBarCreationTimer.restart();
-    }
-
-    Binding {
-        when: !root.canFlickWithMouse
-        target: root.flickableItem
-        property: "interactive"
-        value: Kirigami.Settings.hasTransientTouchInput
-        restoreMode: Binding.RestoreBinding
-    }
-    Timer {
-        id: scrollBarCreationTimer
-        interval: 0
-        onTriggered: {
-            //create or destroy the vertical scrollbar
-            if ((!flickableItem.ScrollBar.vertical) &&
-                verticalScrollBarPolicy !== Qt.ScrollBarAlwaysOff) {
-                flickableItem.ScrollBar.vertical = verticalScrollComponent.createObject(root);
-            } else if (flickableItem.ScrollBar.vertical &&
-                verticalScrollBarPolicy === Qt.ScrollBarAlwaysOff) {
-                flickableItem.ScrollBar.vertical.destroy();
-            }
-
-            //create or destroy the horizontal scrollbar
-            if ((!flickableItem.ScrollBar.horizontal) &&
-                horizontalScrollBarPolicy !== Qt.ScrollBarAlwaysOff) {
-                flickableItem.ScrollBar.horizontal = horizontalScrollComponent.createObject(root);
-            } else if (flickableItem.ScrollBar.horizontal &&
-                horizontalScrollBarPolicy === Qt.ScrollBarAlwaysOff) {
-                flickableItem.ScrollBar.horizontal.destroy();
-            }
-        }
-    }
-    Kirigami.WheelHandler {
-        id: wheelHandler
-        target: root.flickableItem
-    }
-    Item {
-        id: flickableParent
-        clip: true
-        anchors {
-            fill: parent
-            leftMargin: root.leftPadding
-            topMargin: root.topPadding
-            rightMargin: root.rightPadding + root.rightSpacing
-            bottomMargin: root.bottomPadding + root.bottomSpacing
-        }
-    }
-    Component {
-        id: flickableComponent
-        Flickable {
-            anchors {
-                fill: parent
-            }
-            contentWidth: root.contentItem ? root.contentItem.width : 0
-            contentHeight: root.contentItem ? root.contentItem.height : 0
-        }
-    }
-    Component {
-        id: verticalScrollComponent
-        ScrollBar {
-            z: flickableParent.z + 1
-            visible: root.verticalScrollBarPolicy !== Qt.ScrollBarAlwaysOff && root.contentItem.visible && size < 1
-            interactive: !Kirigami.Settings.hasTransientTouchInput
-
-            anchors {
-                right: parent.right
-                top: parent.top
-                bottom: parent.bottom
-                bottomMargin: root.bottomSpacing
-            }
-        }
-    }
-    Component {
-        id: horizontalScrollComponent
-        ScrollBar {
-            z: flickableParent.z + 1
-            visible: root.horizontalScrollBarPolicy !== Qt.ScrollBarAlwaysOff && root.contentItem.visible && size < 1
-            interactive: !Kirigami.Settings.hasTransientTouchInput
-
-            anchors {
-                left: parent.left
-                right: parent.right
-                bottom: parent.bottom
-                rightMargin: root.rightSpacing
-            }
-        }
-    }
-}
